[{"/Users/jonlow/encouragement-board/src/reportWebVitals.js":"1","/Users/jonlow/encouragement-board/src/App.tsx":"2","/Users/jonlow/encouragement-board/src/index.tsx":"3","/Users/jonlow/encouragement-board/src/firebaseConfig.js":"4","/Users/jonlow/encouragement-board/src/components/NewMessage.tsx":"5","/Users/jonlow/encouragement-board/src/components/Messages.tsx":"6","/Users/jonlow/encouragement-board/src/components/Landing.tsx":"7","/Users/jonlow/encouragement-board/src/components/Board.tsx":"8"},{"size":362,"mtime":1610681574455,"results":"9","hashOfConfig":"10"},{"size":1623,"mtime":1611562587989,"results":"11","hashOfConfig":"10"},{"size":268,"mtime":1610684300544,"results":"12","hashOfConfig":"10"},{"size":570,"mtime":1611525924191,"results":"13","hashOfConfig":"10"},{"size":4622,"mtime":1611546562383,"results":"14","hashOfConfig":"10"},{"size":1521,"mtime":1611530683799,"results":"15","hashOfConfig":"10"},{"size":3466,"mtime":1611545524145,"results":"16","hashOfConfig":"10"},{"size":1779,"mtime":1611562591772,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wp3nj2",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jonlow/encouragement-board/src/reportWebVitals.js",[],"/Users/jonlow/encouragement-board/src/App.tsx",[],"/Users/jonlow/encouragement-board/src/index.tsx",["37"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n",["38","39"],"/Users/jonlow/encouragement-board/src/firebaseConfig.js",[],"/Users/jonlow/encouragement-board/src/components/NewMessage.tsx",["40","41","42","43","44"],"import './NewMessage.css';\nimport './Messages.css';\nimport React, { useRef, useState, useEffect } from 'react';\nimport { useDocumentData, useCollectionData } from 'react-firebase-hooks/firestore';\n\nimport { CircularProgress } from '@material-ui/core';\n\nimport firebase from 'firebase/app';\nconst db = firebase.firestore();\n\nexport interface MessageType {\n  text: any;\n  id: string;\n  displayName: string;\n  uid: string;\n  photoURL: string;\n  createdAt: Date;\n}\n\nfunction NewMessage (props: any) {\n\n  const [formValue, setFormValue] = useState('');\n  const [formStyle, setFormStyle] = useState('text');\n  const suRef = db.collection('users').doc(props.selectedUser);\n  const messagesRef = suRef.collection('messages');\n  const [selected, loading] = useDocumentData<any>(suRef);\n  const [msgs, msgLoading] = useCollectionData(messagesRef);\n  const [sentMsg, setSentMsg] = useState<MessageType>();\n\n  const sendMessage = async (e: any) => {\n    e.preventDefault();\n\n    const { uid, photoURL, displayName } = props.user;\n    const text = {\n      message: formValue,\n      style: formStyle,\n    };\n\n    let msg;\n\n    if (sentMsg) {\n      // if a message already exists, then add more text\n      await messagesRef.doc(sentMsg.id).update({\n        text: firebase.firestore.FieldValue.arrayUnion(text),\n      });\n\n      msg = await messagesRef.doc(sentMsg.id).get();\n    }\n    else {\n      // if a message does not exist, create the message\n      await messagesRef.add({\n        text: [text],\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        uid,\n        displayName,\n        photoURL\n      }).then(async (newDoc) => {\n        // add the message id to the message\n        messagesRef.doc(newDoc.id).update({\n          id: newDoc.id,\n        });\n        // increment notes received from the selected user\n        suRef.update({\n          notesReceived: firebase.firestore.FieldValue.increment(1),\n        });\n        // increment notes sent from the sending user\n        db.collection('users').doc(uid).update({\n          notesWritten: firebase.firestore.FieldValue.increment(1),\n        });\n\n        msg = await messagesRef.doc(newDoc.id).get();\n      });\n    }\n    if (msg) {\n      checkMessage(msg.data());\n    }\n    setFormValue('');\n  }\n\n  const deleteMessage = async ( message:any ) => {\n    if (sentMsg) {\n      await messagesRef.doc(sentMsg.id).update({\n        text: firebase.firestore.FieldValue.arrayRemove(message),\n      });\n\n      const msg = await messagesRef.doc(sentMsg.id).get();\n      checkMessage(msg.data());\n    }\n  }\n\n  const checkMessage = (msg: any) => {\n\n    const m = msg;\n\n    const setMsg = {\n      uid : m?.uid,\n      id: m?.id,\n      photoURL: m?.photoURL,\n      createdAt: m?.createdAt,\n      text: m?.text,\n      displayName: m?.displayName,\n    };\n    setSentMsg(setMsg);\n  }\n\n  const PastMessages = () => {\n    if (sentMsg) {\n      return (\n        <div>\n          {sentMsg.text.map((m:any, i:number) => (\n            <div className=\"past-messages__text-row\">\n              <button className=\"delete\" onClick={() => deleteMessage(m)}>x</button>\n              <p key={i} className={m.style}>{m.message}</p>\n            </div>\n          ))}\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  useEffect(() => {\n    // check to see if a message has already been sent\n    if (msgs && msgs.length != 0) {\n      msgs.map((msg:any) => {\n        if (msg.uid == props.user.uid) {\n          setSentMsg(msg);\n        }\n      });\n    }\n    //console.log('use 3 effect');\n  }, [msgLoading, sentMsg]);\n\n  return (\n    (!loading && !msgLoading) ?\n      <div className=\"new-message\">\n        <h3>Your message to <em>{selected.name}</em></h3>\n        <PastMessages />\n\n        <form onSubmit={sendMessage}>\n          <button className=\"close\" onClick={props.hideMessages}>x</button>\n          <textarea className={formStyle} value={formValue}\n            onChange={(e) => {\n              setFormValue(e.target.value)}}\n            placeholder=\"say something nice\" />\n          <div className=\"button-row\">\n            <select value={formStyle}\n              onChange={(e) => {\n                setFormStyle(e.target.value)}}>\n              <option value=\"text\">Normal</option>\n              <option value=\"bold\">Bold</option>\n              <option value=\"italic\">Italic</option>\n              <option value=\"van\">Vanessa Loud</option>\n            </select>\n            <button className=\"submit\" type=\"submit\" disabled={!formValue}>Send it!</button>\n          </div>\n        </form>\n      </div>\n    : <div><CircularProgress /></div>\n  );\n}\n\nexport default NewMessage;\n","/Users/jonlow/encouragement-board/src/components/Messages.tsx",["45","46","47"],"/Users/jonlow/encouragement-board/src/components/Landing.tsx",["48","49","50","51"],"/Users/jonlow/encouragement-board/src/components/Board.tsx",["52","53","54","55"],{"ruleId":"56","severity":1,"message":"57","line":5,"column":8,"nodeType":"58","messageId":"59","endLine":5,"endColumn":23},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"56","severity":1,"message":"64","line":3,"column":17,"nodeType":"58","messageId":"59","endLine":3,"endColumn":23},{"ruleId":"65","severity":1,"message":"66","line":125,"column":29,"nodeType":"67","messageId":"68","endLine":125,"endColumn":31},{"ruleId":"69","severity":1,"message":"70","line":126,"column":26,"nodeType":"71","messageId":"72","endLine":126,"endColumn":28},{"ruleId":"65","severity":1,"message":"73","line":127,"column":21,"nodeType":"67","messageId":"68","endLine":127,"endColumn":23},{"ruleId":"74","severity":1,"message":"75","line":133,"column":6,"nodeType":"76","endLine":133,"endColumn":27,"suggestions":"77"},{"ruleId":"56","severity":1,"message":"78","line":13,"column":25,"nodeType":"58","messageId":"59","endLine":13,"endColumn":34},{"ruleId":"56","severity":1,"message":"79","line":15,"column":9,"nodeType":"58","messageId":"59","endLine":15,"endColumn":17},{"ruleId":"65","severity":1,"message":"73","line":33,"column":24,"nodeType":"67","messageId":"68","endLine":33,"endColumn":26},{"ruleId":"56","severity":1,"message":"80","line":5,"column":8,"nodeType":"58","messageId":"59","endLine":5,"endColumn":15},{"ruleId":"56","severity":1,"message":"81","line":9,"column":10,"nodeType":"58","messageId":"59","endLine":9,"endColumn":22},{"ruleId":"56","severity":1,"message":"82","line":18,"column":10,"nodeType":"58","messageId":"59","endLine":18,"endColumn":20},{"ruleId":"83","severity":1,"message":"84","line":35,"column":11,"nodeType":"85","endLine":35,"endColumn":55},{"ruleId":"56","severity":1,"message":"86","line":2,"column":17,"nodeType":"58","messageId":"59","endLine":2,"endColumn":25},{"ruleId":"83","severity":1,"message":"84","line":32,"column":13,"nodeType":"85","endLine":33,"endColumn":48},{"ruleId":"83","severity":1,"message":"84","line":36,"column":13,"nodeType":"85","endLine":37,"endColumn":48},{"ruleId":"83","severity":1,"message":"84","line":40,"column":13,"nodeType":"85","endLine":41,"endColumn":48},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["87"],"no-negated-in-lhs",["88"],"'useRef' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'msgs' and 'props.user.uid'. Either include them or remove the dependency array.","ArrayExpression",["89"],"'setEnvImg' is assigned a value but never used.","'addImage' is assigned a value but never used.","'landing' is defined but never used.","'useAuthState' is defined but never used.","'firstLogin' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},"Update the dependencies array to be: [msgLoading, msgs, props.user.uid, sentMsg]",{"range":"92","text":"93"},[3535,3556],"[msgLoading, msgs, props.user.uid, sentMsg]"]